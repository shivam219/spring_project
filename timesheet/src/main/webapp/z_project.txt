

fetch only those project in that employee has work


make all input tag are read only


//dropdown - working
   <div class="dropdown">
                        <a class="btn btn-link text-muted py-1 font-size-16 shadow-none dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="bx bx-dots-horizontal-rounded"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="#">Action</a></li>
                            <li><a class="dropdown-item" href="#">Another action</a></li>
                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                        </ul>
                    </div>

   <script src="https://cdn.jsdelivr.net/npm/chart.js@3/dist/chart.min.js"></script>
 

-- chart - api chart.js
     <div class="row justify-content-center">
        <div class="col-xl-10 ">
          <!-- Montyly task-->
          <div class="card mb-4">
            <div class="card-header">Month Task</div>
            <div class="card-body">
              <div class="row">
                <div class="col-lg-12">
                  <canvas id="myChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

 <script>
      $(document).ready(function () {
        $.ajax({
          type: 'POST',
          url: 'fetch-month-sheet-employee?monthSheetId=' + $("#monthSheetId").val() + '',
          contentType: 'application/json',
          success: function (d, msg, xh) {
            let data = [];
            let labels = [];
            for (let i = 0; i < d.length; i++) {
              data[i] = parseInt(d[i]["hour"]);
              labels[i] = d[i]["date"];
              // labels[i] = d[i]["date"] + ' ' + d[i]["projectName"]; // 
            }
            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [{
                  label: 'Work ',
                  data: data,
                  backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
                }]
              }
            });
          }, error: function (data, msg, xh) {

          }
        });
      });
    </script>


public List<MonthSheetDataDto> findMonthSheetDataAndApprove(long monthId) {
		List<Tuple> tu = msr.findMonthSheetDataAndApprove2(monthId);
		List<MonthSheetDataDto> ud = tu.stream().map(m -> new MonthSheetDataDto(m.get(0, String.class),
				m.get(1, String.class), m.get(2, String.class), m.get(3, Integer.class))).collect(Collectors.toList());
		Set<String> set = new HashSet<>();
		List<MonthSheetDataDto> ud2 = new ArrayList<>();
		int size = 0;
		int hour = 0;
		int hours = 0;
		if (ud.size() > 0) {
			hour = Integer.valueOf(ud.get(0).getHour());
			hours = Integer.valueOf(ud.get(0).getHour());
			set.add(ud.get(0).getDate());
			ud2.add(ud.get(0));
			for (int i = 1; i < ud.size(); i++) {
				if (set.contains(ud.get(i).getDate())) {
					size = ud2.size() - 1;
					String ud2Pn = ud2.get(size).getProjectName();
					String udPn = ud.get(i).getProjectName();

					String ud2Desc = ud2.get(size).getDescr();
					String udDesc = ud.get(i).getDescr();

					String ud2Hour = ud2.get(size).getHour();
					String udHour = ud.get(i).getHour();
					hours = hours + Integer.parseInt(ud.get(i).getHour());
					ud2.get(size).setProjectName(ud2Pn + " <br> " + udPn);
					ud2.get(size).setDescr(ud2Desc + " <br> " + udDesc);
					ud2.get(size).setHour(ud2Hour + " <br> " + udHour);

				} else {
					if (hour != hours) {
						String oldHour = ud2.get(size).getHour();
						ud2.get(size).setHour(oldHour + "<br><b>" + hours + "</br></b>");
					}
					ud2.add(ud.get(i));
					set.add(ud.get(i).getDate());
					hour = Integer.valueOf(ud.get(i).getHour());
					hours = Integer.valueOf(ud.get(i).getHour());
				}
			}
		} 
		return ud2;
	}


                if(workStatus == 1  || workStatus == 2){
                    uri = '/fetch-day-sheet-week?startDate='+sd+'&endDate='+ed; 
                }else{
                    uri = '/fetch-day-sheet-week?startDate='+sd+'&endDate='+ed; 
                }

                        // var d = Object.entries(obj); 