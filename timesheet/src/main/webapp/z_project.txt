

fetch only those project in that employee has work


make all input tag are read only


//dropdown - working
   <div class="dropdown">
                        <a class="btn btn-link text-muted py-1 font-size-16 shadow-none dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="bx bx-dots-horizontal-rounded"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="#">Action</a></li>
                            <li><a class="dropdown-item" href="#">Another action</a></li>
                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                        </ul>
                    </div>

   <script src="https://cdn.jsdelivr.net/npm/chart.js@3/dist/chart.min.js"></script>
 

-- chart - api chart.js
     <div class="row justify-content-center">
        <div class="col-xl-10 ">
          <!-- Montyly task-->
          <div class="card mb-4">
            <div class="card-header">Month Task</div>
            <div class="card-body">
              <div class="row">
                <div class="col-lg-12">
                  <canvas id="myChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

 <script>
      $(document).ready(function () {
        $.ajax({
          type: 'POST',
          url: 'fetch-month-sheet-employee?monthSheetId=' + $("#monthSheetId").val() + '',
          contentType: 'application/json',
          success: function (d, msg, xh) {
            let data = [];
            let labels = [];
            for (let i = 0; i < d.length; i++) {
              data[i] = parseInt(d[i]["hour"]);
              labels[i] = d[i]["date"];
              // labels[i] = d[i]["date"] + ' ' + d[i]["projectName"]; // 
            }
            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, {
              type: 'bar',
              data: {
                labels: labels,
                datasets: [{
                  label: 'Work ',
                  data: data,
                  backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                  ],
                  borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                  ],
                  borderWidth: 1
                }]
              }
            });
          }, error: function (data, msg, xh) {

          }
        });
      });
    </script>


public List<MonthSheetDataDto> findMonthSheetDataAndApprove(long monthId) {
		List<Tuple> tu = msr.findMonthSheetDataAndApprove2(monthId);
		List<MonthSheetDataDto> ud = tu.stream().map(m -> new MonthSheetDataDto(m.get(0, String.class),
				m.get(1, String.class), m.get(2, String.class), m.get(3, Integer.class))).collect(Collectors.toList());
		Set<String> set = new HashSet<>();
		List<MonthSheetDataDto> ud2 = new ArrayList<>();
		int size = 0;
		int hour = 0;
		int hours = 0;
		if (ud.size() > 0) {
			hour = Integer.valueOf(ud.get(0).getHour());
			hours = Integer.valueOf(ud.get(0).getHour());
			set.add(ud.get(0).getDate());
			ud2.add(ud.get(0));
			for (int i = 1; i < ud.size(); i++) {
				if (set.contains(ud.get(i).getDate())) {
					size = ud2.size() - 1;
					String ud2Pn = ud2.get(size).getProjectName();
					String udPn = ud.get(i).getProjectName();

					String ud2Desc = ud2.get(size).getDescr();
					String udDesc = ud.get(i).getDescr();

					String ud2Hour = ud2.get(size).getHour();
					String udHour = ud.get(i).getHour();
					hours = hours + Integer.parseInt(ud.get(i).getHour());
					ud2.get(size).setProjectName(ud2Pn + " <br> " + udPn);
					ud2.get(size).setDescr(ud2Desc + " <br> " + udDesc);
					ud2.get(size).setHour(ud2Hour + " <br> " + udHour);

				} else {
					if (hour != hours) {
						String oldHour = ud2.get(size).getHour();
						ud2.get(size).setHour(oldHour + "<br><b>" + hours + "</br></b>");
					}
					ud2.add(ud.get(i));
					set.add(ud.get(i).getDate());
					hour = Integer.valueOf(ud.get(i).getHour());
					hours = Integer.valueOf(ud.get(i).getHour());
				}
			}
		} 
		return ud2;
	}


                if(workStatus == 1  || workStatus == 2){
                    uri = '/fetch-day-sheet-week?startDate='+sd+'&endDate='+ed; 
                }else{
                    uri = '/fetch-day-sheet-week?startDate='+sd+'&endDate='+ed; 
                }

                        // var d = Object.entries(obj); 


// project - no 
<div class="col-md-3">
          <div class="card">
            <div class="card-header">Project</div>
            <div class="card-body">
              <h5 class="card-title"> No of Project</span></h5>
              <div class="d-flex align-items-center">
                <div class="card-icon rounded-circle d-flex align-items-center justify-content-center">
                  <i class="fa fa-solid fa-bolt"></i>
                </div>
                <div class="ps-3">
                  <span class="text-success small pt-1 fw-bold">${customer.getProject().size()}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

//weather
<div class="col ">
          <div class="card">
            <img class="" src="images/weatherbg.jpg" alt="Card image cap" style="max-height: 105px">
            <div class="card-img-overlay" style="height: 110px">
              <div class="d-flex align-items-center">
                <h3 class="card-title text-white mb-0">New Delhi</h3>
                <div class="ms-auto">
                  <small class="card-text text-white fw-light">Sunday 15 march</small>
                </div>
              </div>
            </div>
            <div class="card-body weather-small">
              <div class="row">
                <div class="col-8 border-end align-self-center">
                  <div class="d-flex">
                    <div class="display-6 text-info">
                      <i class="wi wi-day-rain-wind"></i>
                    </div>
                    <div class="ms-3">
                      <h1 class="fw-light text-info mb-0">
                        32<sup>0</sup>
                      </h1>
                      <small>Sunny Rainy day</small>
                    </div>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <h1 class="fw-light mb-0">25<sup>0</sup></h1>
                  <small>Tonight</small>
                </div>
              </div>
            </div>
          </div>
        </div>
        ///

	let data = {
					dayMode: $("input[name=dayMode]:checked").val(),
					leaveType: $("#selectLeaveType").val(),
					startDate: $("#startDate").val(),
					endDate: $("#endDate").val(),
					managerId: $("#manager").val(),
					// leaveReason: $("#leaveReason").val()
				}

        	// data: JSON.stringify(data),
					// contentType: 'application/json',


//	@PostMapping(value = "/applyleaveprocess")
//	public String applyleaveprocess(HttpServletRequest request, Model model, @ModelAttribute Leave l) {
//		Long empId = ((Long) request.getSession().getAttribute("empId"));
//		Employee emp = er.findById(empId).get();
//		l.setEmpId(String.valueOf(emp.getEmpId()));
//		l.setEmpName(emp.getFirstName() + " " + emp.getLastName());
//		Employee manager = er.findById(Long.parseLong(ur.findById(empId).get().getLeaveReportingManager())).get();
//		l.setManagerId(String.valueOf(manager.getEmpId()));
//		l.setManagerName(manager.getFirstName() + " " + manager.getLastName());
//		l.setStatus("Pending");
//		if (l.getEndDate() == null || l.getEndDate().equals("")) {
//			l.setEndDate(l.getStartDate());
//		}
//		leaveService.save(l);
//		l.setLeaveId(leaveService.getLeaveId());
//		leaveService.EmailOnSubmit(l);
//		return "redirect:/home";
//	}

        //
        	public Leave save(Leave l) {
		System.out.println(lr.saveLeave(l.getEmpId(), l.getEmpName(), l.getManagerName(), l.getManagerId(),
				l.getDayMode(), l.getLeaveType(), l.getLeaveReason(), l.getStartDate(), l.getEndDate(),
				l.getAttachment(), l.getStatus(), l.getRejectReason()));
		return l;
	}


if (le.getSecondStatus() != null && le.getSecondStatus().equals("Pending")) {
				le.setSecondApproveReason(la.getApproveReason());
				if (!le.getManagerId().equals(le.getLeaveManagerId())) {
					le.setSecondStatus("Approved");
				}
				
			} else if (le.getStatus().trim().equals("Pending")) {
				le.setApproveReason(la.getApproveReason());
				le.setStatus("Approved");
				if (le.getManagerId().equals(le.getLeaveManagerId())) {
					le.setSecondStatus("Approved");
				} else {
					le.setSecondStatus("Pending");
				}
			}


	@PostMapping("/pending-leave-report")
	public String pendingLeaveReportFetch(Model m, @RequestParam("leaveMonth") String month,
			@RequestParam("leaveYear") String year) throws Exception {
		this.month = month;
		this.year = year;
		m.addAttribute("month", month);
		m.addAttribute("year", year);
		int i = 0;
		String[] days = new String[lr.getPendingLeaveByMonthAndYear(month, year).size()];
		for (Leave l : lr.getPendingLeaveByMonthAndYear(month, year)) {
			if (l.getDayMode().contains("Half Day")) {
				days[i] = "0.5";
			} else {

				days[i] = (Math.abs(TimeUnit.MILLISECONDS
						.toDays(((new SimpleDateFormat("yyyy-MM-dd").parse(l.getStartDate()).getTime())
								- (new SimpleDateFormat("yyyy-MM-dd").parse(l.getEndDate()).getTime()))))
						+ 1) + "";
			}
			i++;
		}
		m.addAttribute("pendingList", lr.getPendingLeaveByMonthAndYear(month, year));
		m.addAttribute("days", days);
		return "pending-leave-report";
	}


    <script src="https://cdn.jsdelivr.net/npm/chart.js@3/dist/chart.min.js"></script>
        <div class="col  ">
          <div class="card">
            <img class="" src="images/weatherbg.jpg" alt="Card image cap" style="max-height: 105px">
            <div class="card-img-overlay" style="height: 110px">
              <div class="d-flex align-items-center">
                <h3 class="card-title text-white mb-0">New Delhi</h3>
                <div class="ms-auto">
                  <small class="card-text text-white fw-light">Sunday 15 march</small>
                </div>
              </div>
            </div>
            <div class="card-body weather-small">
              <div class="row">
                <div class="col-8 border-end align-self-center">
                  <div class="d-flex">
                    <div class="display-6 text-info">
                      <i class="wi wi-day-rain-wind"></i>
                    </div>
                    <div class="ms-3">
                      <h1 class="fw-light text-info mb-0">
                        32<sup>0</sup>
                      </h1>
                      <small>Sunny Rainy day</small>
                    </div>
                  </div>
                </div>
                <div class="col-4 text-center">
                  <h1 class="fw-light mb-0">25<sup>0</sup></h1>
                  <small>Tonight</small>
                </div>
              </div>
            </div>
          </div>
        </div>