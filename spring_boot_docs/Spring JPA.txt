Spring jpa
--
JPA - java persistence api 
1) it is specifiication and standard and hibernate is implementation of it.
-just add spring-boot-data-jpa 
- no need to add hibernate explictly
- it two main interface curdRepository, JPARepository
-and EnitityManagerFactory, EnitityManager
-

--------CurdRepository
-methods
--save         Object
--saveAll    Iterable<S>
--findById - return option<T> 
--optional-get() methods return object if present if not NoSuchElementException



--Custom filter
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference

public List<user> findByName();
------------------------column name
er.existsByEmpIdAndEmpPassword(e.getEmpId(), e.getEmpPassword());
public Employee findByEmpIdAndEmpPassword(int empId ,String empPassword);
public Boolean existsByEmpIdAndEmpPassword(int empId ,String empPassword);

Derive Query methods/Custom finder 
data by name , name and password,  starting prefix, like

findByNameStartingWith(String prefix)
findByNameEndingWith(String suffix)
findByNameContaining(String words)

findByNameLike(String likePattern)

findByAgeLessThan(int age)

findByAgeGreaterThanEqual(int age)

findByAgeIn(Collection<Ineger> ages )

findByNameOrderByName(String name)


@Query 
JPQL query --hql 
native query --

1)JPQL

@Query("select u from user u")
public List<User> getAllUsers();

----------------------------------------space should be there =:n
@Query("select u from User where u.name =:n" and u.city=:c")
public List<User> getUsersByName(@Param("n") String name , @Param("c") String c )


@Query(value= "select * from user " , nativeQuery = true)
public List<user> getUsers()