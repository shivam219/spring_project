
API application programming interface

It is a set of rules that allow programs to talk to each other. The developer create the api on the
server and allow the clinet to talk to it


Rest API

A set of constraints to be used for creating web services

Client-Server -- url ,uri by get , post , json
Stateless -- Databases will store any information request
Cacheable -- Cache data by user
Layered   -- Request fire from any device

The importants methods of HTTP are

GET: it reads a resource.
PUT: it updates an exiting resource
POST: it creates a new resource
DELETE:it deletes the resource

For example 
POST  /Users: it create a user 
GET   /user/{10}: it retrivews the details of user
GET   /user: it retrivew the detail of all Users
DELETE/user: it deletes all user
DELETE/users/{id}:it deletes a user
GET   /user/{id}/posts/post_id: it retrieve the details of a specific post
POST  /user/{id}/posts:it create a post of the user

HTTP also defines the following standard
status code
404 - resource no founded
200 - success
201 - created
401 - unauthorized
500 - server error

Creating Rest api project
--@RequestMapping - method wait for intellisence 

error
@RequestMapping(value = "/test", method = RequestMethod.GET)
	@ResponseBody
	public String requestMethodName(@RequestParam String param) {
		return "Shivam<h1> choudhary</h1>";
	}
-- getting error while running because 
Required request parameter 'param' for method parameter type String is not present\r\n\tat

 ResponseEntity<Object> deleteBook
	return ResponseEntity.status(HttpStatus.NO_CONTENT).build();




---Saving object reference it Databases

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "book_id")
	int id;
	String title;
	@OneToOne(cascade = CascadeType.ALL)
	Author author;








